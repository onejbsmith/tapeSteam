@*<h3>BookGaugeChart</h3>*@
@using tdaStreamHub.Data
@using Radzen

<h3><RadzenLabel Text='@bids' class="@badgeClass" /></h3>

   <RadzenChart Style="
        width: 75px; height: 75px;
        position: relative; right: 55px; top: 40px">
    <RadzenPieSeries 
        Data="@bookData" CategoryProperty="Price" Radius="30"
        Title="@(seconds.ToString())"
        Fills="@(new List<string>() {  "green","red"})"
        ValueProperty="Size" />

    <RadzenChartTooltipOptions Visible="false" />
    <RadzenLegend Visible="false" />
</RadzenChart>
@*<RadzenLabel Text="@(bookData[0].Size.ToString())"></RadzenLabel>
    <RadzenLabel Text="@(bookData[1].Size.ToString())"></RadzenLabel>*@
<style>

    .article {
        flex: 1 0 auto;
        border: solid 2px green;
        max-height: 40px;
    }
</style>

@code {

    string badgeClass = "btn";
    string bids;
    string asks;

    [Parameter]
    public string symbol { get; set; }

    [Parameter]
    public int seconds { get; set; }

    [Parameter]
    public bool isPrintsSize { get; set; }


    BookDataItem[] bookData = new BookDataItem[0];
    //   {
    //new BookDataItem { Price = 350.11m, Size = 1000 },
    //new BookDataItem { Price = 351m, Size = 501 } };


    protected override async Task OnInitializedAsync()
    {
        TDAStreamerData.OnStatusesChanged += getBookData;
        StateHasChanged();
        await Task.CompletedTask;
    }

    public void getBookData()
    {
        TDAStreamerData.getBookCompositePieData(ref bookData, seconds, isPrintsSize, symbol);

        if (bookData == null || bookData[0]==null || bookData.Length == 0) return;
        bids = (100 * (bookData[1].Size / bookData[0].Size - 1)).ToString("n0");
        int nBids = Convert.ToInt16(bids);

        //if (nBids < -20)
        //    badgeClass = "alert-danger article";
        //else if (nBids > 20)
        //    badgeClass = "alert-success article";
        //else
        //    badgeClass = "alert-warning article";

        StateHasChanged();

    }

}
