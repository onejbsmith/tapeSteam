"use strict";var __extends=this&&this.__extends||function(){var t=function(o,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,o){t.__proto__=o}||function(t,o){for(var e in o)o.hasOwnProperty(e)&&(t[e]=o[e])})(o,e)};return function(o,e){function n(){this.constructor=o}t(o,e),o.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}}();import Annotation from"../Annotations.js";import CrookedLine from"./CrookedLine.js";import U from"../../../Core/Utilities.js";var merge=U.merge,ElliottWave=function(t){function o(o,e){return t.call(this,o,e)||this}return __extends(o,t),o.prototype.addLabels=function(){this.getPointsOptions().forEach(function(t,o){var e=this.options.typeOptions,n=this.initLabel(merge(t.label,{text:e.labels[o],point:function(t){return t.annotation.points[o]}}),!1);t.label=n.options},this)},o}(CrookedLine);ElliottWave.prototype.defaultOptions=merge(CrookedLine.prototype.defaultOptions,{typeOptions:{labels:["(0)","(A)","(B)","(C)","(D)","(E)"],line:{strokeWidth:1}},labelOptions:{align:"center",allowOverlap:!0,crop:!0,overflow:"none",type:"rect",backgroundColor:"none",borderWidth:0,y:-5}}),Annotation.types.elliottWave=ElliottWave;export default ElliottWave;