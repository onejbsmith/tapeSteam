"use strict";var __extends=this&&this.__extends||function(){var t=function(n,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var i in n)n.hasOwnProperty(i)&&(t[i]=n[i])})(n,i)};return function(n,i){function o(){this.constructor=n}t(n,i),n.prototype=null===i?Object.create(i):(o.prototype=i.prototype,new o)}}();import Annotation from"../Annotations.js";import CrookedLine from"./CrookedLine.js";import MockPoint from"../MockPoint.js";import U from"../../../Core/Utilities.js";var merge=U.merge,InfinityLine=function(t){function n(n,i){return t.call(this,n,i)||this}return __extends(n,t),n.edgePoint=function(t,i){return function(o){var e=o.annotation,r=e.points,s=e.options.typeOptions.type;return"horizontalLine"===s?r=[r[0],new MockPoint(e.chart,r[0].target,{x:r[0].x+1,y:r[0].y,xAxis:r[0].options.xAxis,yAxis:r[0].options.yAxis})]:"verticalLine"===s&&(r=[r[0],new MockPoint(e.chart,r[0].target,{x:r[0].x,y:r[0].y+1,xAxis:r[0].options.xAxis,yAxis:r[0].options.yAxis})]),n.findEdgePoint(r[t],r[i])}},n.findEdgeCoordinate=function(t,n,i,o){var e="x"===i?"y":"x";return(n[i]-t[i])*(o-t[e])/(n[e]-t[e])+t[i]},n.findEdgePoint=function(t,i){var o,e,r,s=t.series.xAxis,p=i.series.yAxis,y=MockPoint.pointToPixels(t),a=MockPoint.pointToPixels(i),x=a.x-y.x,d=a.y-y.y,f=s.left,c=f+s.width,u=p.top,g=u+p.height,h=x<0?f:c,P=d<0?u:g,l={x:0===x?y.x:h,y:0===d?y.y:P};return 0!==x&&0!==d&&(e=n.findEdgeCoordinate(y,a,"y",h),o=n.findEdgeCoordinate(y,a,"x",P),e>=u&&e<=g?(l.x=h,l.y=e):(l.x=o,l.y=P)),l.x-=f,l.y-=u,t.series.chart.inverted&&(r=l.x,l.x=l.y,l.y=r),l},n.prototype.addShapes=function(){var t=this.options.typeOptions,i=[this.points[0],n.endEdgePoint];t.type.match(/Line/g)&&(i[0]=n.startEdgePoint);var o=this.initShape(merge(t.line,{type:"path",points:i}),!1);t.line=o.options},n.endEdgePoint=n.edgePoint(0,1),n.startEdgePoint=n.edgePoint(1,0),n}(CrookedLine);InfinityLine.prototype.defaultOptions=merge(CrookedLine.prototype.defaultOptions,{}),Annotation.types.infinityLine=InfinityLine;export default InfinityLine;