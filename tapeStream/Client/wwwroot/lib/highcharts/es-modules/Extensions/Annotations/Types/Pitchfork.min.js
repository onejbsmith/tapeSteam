"use strict";var __extends=this&&this.__extends||function(){var t=function(n,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var i in n)n.hasOwnProperty(i)&&(t[i]=n[i])})(n,i)};return function(n,i){function o(){this.constructor=n}t(n,i),n.prototype=null===i?Object.create(i):(o.prototype=i.prototype,new o)}}();import Annotation from"../Annotations.js";import InfinityLine from"./InfinityLine.js";import MockPoint from"../MockPoint.js";import U from"../../../Core/Utilities.js";var merge=U.merge,Pitchfork=function(t){function n(n,i){return t.call(this,n,i)||this}return __extends(n,t),n.outerLineEdgePoint=function(t){return function(i){var o=i.annotation,e=o.points;return n.findEdgePoint(e[t],e[0],new MockPoint(o.chart,i,o.midPointOptions()))}},n.findEdgePoint=function(t,n,i){var o=Math.atan2(i.plotY-n.plotY,i.plotX-n.plotX);return{x:t.plotX+1e7*Math.cos(o),y:t.plotY+1e7*Math.sin(o)}},n.middleLineEdgePoint=function(t){var n=t.annotation,i=n.points;return InfinityLine.findEdgePoint(i[0],new MockPoint(n.chart,t,n.midPointOptions()))},n.prototype.midPointOptions=function(){var t=this.points;return{x:(t[1].x+t[2].x)/2,y:(t[1].y+t[2].y)/2,xAxis:t[0].series.xAxis,yAxis:t[0].series.yAxis}},n.prototype.addShapes=function(){this.addLines(),this.addBackgrounds()},n.prototype.addLines=function(){this.initShape({type:"path",points:[this.points[0],n.middleLineEdgePoint]},!1),this.initShape({type:"path",points:[this.points[1],n.topLineEdgePoint]},!1),this.initShape({type:"path",points:[this.points[2],n.bottomLineEdgePoint]},!1)},n.prototype.addBackgrounds=function(){var t=this.shapes,n=this.options.typeOptions,i=this.initShape(merge(n.innerBackground,{type:"path",points:[function(t){var n=t.annotation,i=n.points,o=n.midPointOptions();return{x:(i[1].x+o.x)/2,y:(i[1].y+o.y)/2,xAxis:o.xAxis,yAxis:o.yAxis}},t[1].points[1],t[2].points[1],function(t){var n=t.annotation,i=n.points,o=n.midPointOptions();return{x:(o.x+i[2].x)/2,y:(o.y+i[2].y)/2,xAxis:o.xAxis,yAxis:o.yAxis}}]})),o=this.initShape(merge(n.outerBackground,{type:"path",points:[this.points[1],t[1].points[1],t[2].points[1],this.points[2]]}));n.innerBackground=i.options,n.outerBackground=o.options},n.topLineEdgePoint=n.outerLineEdgePoint(1),n.bottomLineEdgePoint=n.outerLineEdgePoint(0),n}(InfinityLine);Pitchfork.prototype.defaultOptions=merge(InfinityLine.prototype.defaultOptions,{typeOptions:{innerBackground:{fill:"rgba(130, 170, 255, 0.4)",strokeWidth:0},outerBackground:{fill:"rgba(156, 229, 161, 0.4)",strokeWidth:0}}}),Annotation.types.pitchfork=Pitchfork;export default Pitchfork;