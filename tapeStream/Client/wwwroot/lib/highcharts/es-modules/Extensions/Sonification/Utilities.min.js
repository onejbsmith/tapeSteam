"use strict";import musicalFrequencies from"./MusicalFrequencies.js";import U from"../../Core/Utilities.js";var clamp=U.clamp;function SignalHandler(i){this.init(i||[])}SignalHandler.prototype.init=function(i){this.supportedSignals=i,this.signals={}},SignalHandler.prototype.registerSignalCallbacks=function(i){var n=this;n.supportedSignals.forEach(function(a){var t=i[a];t&&(n.signals[a]=n.signals[a]||[]).push(t)})},SignalHandler.prototype.clearSignalCallbacks=function(i){var n=this;i?i.forEach(function(i){n.signals[i]&&delete n.signals[i]}):n.signals={}},SignalHandler.prototype.emitSignal=function(i,n){var a;return this.signals[i]&&this.signals[i].forEach(function(i){var t=i(n);a=void 0!==t?t:a}),a};var utilities={musicalFrequencies:musicalFrequencies,SignalHandler:SignalHandler,getMusicalScale:function(i){return musicalFrequencies.filter(function(n,a){var t=a%12+1;return i.some(function(i){return i===t})})},calculateDataExtremes:function(i,n){return i.series.reduce(function(i,a){return a.points.forEach(function(a){var t=void 0!==a[n]?a[n]:a.options[n];i.min=Math.min(i.min,t),i.max=Math.max(i.max,t)}),i},{min:1/0,max:-1/0})},virtualAxisTranslate:function(i,n,a,t){var r=n.max-n.min,e=Math.abs(a.max-a.min)*(t?n.max-i:i-n.min)/r,s=a.min+e;return r>0?clamp(s,a.min,a.max):a.min}};export default utilities;