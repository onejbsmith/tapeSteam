"use strict";import U from"../Core/Utilities.js";var extend=U.extend,pick=U.pick,min=Math.min,max=Math.max,abs=Math.abs;function findLastObstacleBefore(t,n,a){for(var x,i,e=a||0,s=t.length-1,r=n-1e-7;e<=s;)if((i=r-t[x=s+e>>1].xMin)>0)e=x+1;else{if(!(i<0))return x;s=x-1}return e>0?e-1:0}function pointWithinObstacle(t,n){return n.x<=t.xMax&&n.x>=t.xMin&&n.y<=t.yMax&&n.y>=t.yMin}function findObstacleFromPoint(t,n){for(var a=findLastObstacleBefore(t,n.x+1)+1;a--;)if(t[a].xMax>=n.x&&pointWithinObstacle(t[a],n))return a;return-1}function pathFromSegments(t){var n=[];if(t.length){n.push(["M",t[0].start.x,t[0].start.y]);for(var a=0;a<t.length;++a)n.push(["L",t[a].end.x,t[a].end.y])}return n}function limitObstacleToBounds(t,n){t.yMin=max(t.yMin,n.yMin),t.yMax=min(t.yMax,n.yMax),t.xMin=max(t.xMin,n.xMin),t.xMax=min(t.xMax,n.xMax)}function straight(t,n){return{path:[["M",t.x,t.y],["L",n.x,n.y]],obstacles:[{start:t,end:n}]}}var simpleConnect=extend(function(t,n,a){var x,i,e,s,r,o,y,M=[],c=pick(a.startDirectionX,abs(n.x-t.x)>abs(n.y-t.y))?"x":"y",d=a.chartObstacles,u=findObstacleFromPoint(d,t),l=findObstacleFromPoint(d,n);function f(t,n,a,x,i){var e={x:t.x,y:t.y};return e[n]=a[x||n]+(i||0),e}function m(t,n,a){var x=abs(n[a]-t[a+"Min"])>abs(n[a]-t[a+"Max"]);return f(n,a,t,a+(x?"Max":"Min"),x?1:-1)}return l>-1?(x={start:s=m(d[l],n,c),end:n},y=s):y=n,u>-1&&(s=m(i=d[u],t,c),M.push({start:t,end:s}),s[c]>=t[c]==s[c]>=y[c]&&(o=t[c="y"===c?"x":"y"]<n[c],M.push({start:s,end:f(s,c,i,c+(o?"Max":"Min"),o?1:-1)}),c="y"===c?"x":"y")),s=f(e=M.length?M[M.length-1].end:t,c,y),M.push({start:e,end:s}),r=f(s,c="y"===c?"x":"y",y),M.push({start:s,end:r}),M.push(x),{path:pathFromSegments(M),obstacles:M}},{requiresObstacles:!0}),fastAvoid=extend(function(t,n,a){var x,i,e,s=pick(a.startDirectionX,abs(n.x-t.x)>abs(n.y-t.y)),r=s?"x":"y",o=[],y=!1,M=a.obstacleMetrics,c=min(t.x,n.x)-M.maxWidth-10,d=max(t.x,n.x)+M.maxWidth+10,u=min(t.y,n.y)-M.maxHeight-10,l=max(t.y,n.y)+M.maxHeight+10,f=a.chartObstacles,m=findLastObstacleBefore(f,c),h=findLastObstacleBefore(f,d);function b(t,n,a){var x,i,e,s,r,o=t.x<n.x?1:-1;for(t.x<n.x?(x=t,i=n):(x=n,i=t),t.y<n.y?(s=t,e=n):(s=n,e=t),r=o<0?min(findLastObstacleBefore(f,i.x),f.length-1):0;f[r]&&(o>0&&f[r].xMin<=i.x||o<0&&f[r].xMax>=x.x);){if(f[r].xMin<=i.x&&f[r].xMax>=x.x&&f[r].yMin<=e.y&&f[r].yMax>=s.y)return a?{y:t.y,x:t.x<n.x?f[r].xMin-1:f[r].xMax+1,obstacle:f[r]}:{x:t.x,y:t.y<n.y?f[r].yMin-1:f[r].yMax+1,obstacle:f[r]};r+=o}return n}function p(t,n,a,x,i){var e,s,r=i.soft,o=i.hard,y=x?"x":"y",M={x:n.x,y:n.y},c={x:n.x,y:n.y},d=t[y+"Max"]>=r[y+"Max"],u=t[y+"Min"]<=r[y+"Min"],l=t[y+"Max"]>=o[y+"Max"],f=t[y+"Min"]<=o[y+"Min"],m=abs(t[y+"Min"]-n[y]),h=abs(t[y+"Max"]-n[y]),p=abs(m-h)<10?n[y]<a[y]:h<m;return c[y]=t[y+"Min"],M[y]=t[y+"Max"],e=b(n,c,x)[y]!==c[y],s=b(n,M,x)[y]!==M[y],p=e?!s||p:!s&&p,p=u?!d||p:!d&&p,p=f?!l||p:!l&&p}for((h=findObstacleFromPoint(f=f.slice(m,h+1),n))>-1&&(e=function(t,n,x){var i=min(t.xMax-n.x,n.x-t.xMin)<min(t.yMax-n.y,n.y-t.yMin),e=p(t,n,x,i,{soft:a.hardBounds,hard:a.hardBounds});return i?{y:n.y,x:t[e?"xMax":"xMin"]+(e?1:-1)}:{x:n.x,y:t[e?"yMax":"yMin"]+(e?1:-1)}}(f[h],n,t),o.push({end:n,start:e}),n=e);(h=findObstacleFromPoint(f,n))>-1;)i=n[r]-t[r]<0,(e={x:n.x,y:n.y})[r]=f[h][i?r+"Max":r+"Min"]+(i?1:-1),o.push({end:n,start:e}),n=e;return{path:pathFromSegments(x=(x=function t(n,x,i){if(n.x===x.x&&n.y===x.y)return[];var e,s,r,o,M,m,h,O=i?"x":"y",g=a.obstacleOptions.margin,v={soft:{xMin:c,xMax:d,yMin:u,yMax:l},hard:a.hardBounds};return(M=findObstacleFromPoint(f,n))>-1?(o=p(M=f[M],n,x,i,v),limitObstacleToBounds(M,a.hardBounds),h=i?{y:n.y,x:M[o?"xMax":"xMin"]+(o?1:-1)}:{x:n.x,y:M[o?"yMax":"yMin"]+(o?1:-1)},(m=findObstacleFromPoint(f,h))>-1&&(limitObstacleToBounds(m=f[m],a.hardBounds),h[O]=o?max(M[O+"Max"]-g+1,(m[O+"Min"]+M[O+"Max"])/2):min(M[O+"Min"]+g-1,(m[O+"Max"]+M[O+"Min"])/2),n.x===h.x&&n.y===h.y?(y&&(h[O]=o?max(M[O+"Max"],m[O+"Max"])+1:min(M[O+"Min"],m[O+"Min"])-1),y=!y):y=!1),s=[{start:n,end:h}]):(s=[{start:n,end:{x:(e=b(n,{x:i?x.x:n.x,y:i?n.y:x.y},i)).x,y:e.y}}],e[i?"x":"y"]!==x[i?"x":"y"]&&(o=p(e.obstacle,e,x,!i,v),limitObstacleToBounds(e.obstacle,a.hardBounds),r={x:i?e.x:e.obstacle[o?"xMax":"xMin"]+(o?1:-1),y:i?e.obstacle[o?"yMax":"yMin"]+(o?1:-1):e.y},i=!i,s=s.concat(t({x:e.x,y:e.y},r,i)))),s=s.concat(t(s[s.length-1].end,x,!i))}(t,n,s)).concat(o.reverse())),obstacles:x}},{requiresObstacles:!0}),algorithms={fastAvoid:fastAvoid,straight:straight,simpleConnect:simpleConnect};export default algorithms;